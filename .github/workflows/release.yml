name: Release from Branch

on:
  workflow_call:
    inputs:
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
        default: ''
    outputs:
      version:
        description: 'The version that was created'
        value: ${{ jobs.create-release.outputs.version }}
      tag_name:
        description: 'The tag name that was created'
        value: ${{ jobs.create-release.outputs.tag_name }}
      release_url:
        description: 'URL of the created GitHub release'
        value: ${{ jobs.create-release.outputs.release_url }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    outputs:
      version: ${{ steps.parse_version.outputs.version }}
      tag_name: ${{ steps.parse_version.outputs.tag_name }}
      release_url: ${{ steps.create_release.outputs.html_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Parse version from branch name
        id: parse_version
        run: |
          branch_name="${{ github.ref_name }}"
          echo "Current branch: $branch_name"
          
          # Check if we're on a release branch
          if [[ ! "$branch_name" =~ ^release/[0-9]{3}\.[0-9]{2}$ ]]; then
            echo "Error: Must run on release branch with format release/xxx.xx"
            echo "Current branch: $branch_name"
            exit 1
          fi
          
          # Extract version from branch name
          version=$(echo "$branch_name" | sed 's/release\///')
          
          # Validate version format (xxx.0[1-4])
          if [[ ! "$version" =~ ^[0-9]{3}\.0[1-4]$ ]]; then
            echo "Error: Version must be xxx.0[1-4] format"
            echo "Found: $version"
            exit 1
          fi
          
          echo "Release version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag_name=$version" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        run: |
          tag_name="${{ steps.parse_version.outputs.tag_name }}"
          
          if git rev-parse "$tag_name" >/dev/null 2>&1; then
            echo "Error: Tag $tag_name already exists"
            exit 1
          fi
          
          echo "Tag $tag_name is available"

      - name: Generate changelog
        id: changelog
        run: |
          current_version="${{ steps.parse_version.outputs.version }}"
          
          echo "Current version: $current_version"
          echo "All tags:"
          git tag -l | grep -E "^[0-9]{3}\.0[1-4]$" | sort -V
          
          # Get all release tags except current one, sorted, and get the most recent
          previous_tag=$(git tag -l | grep -E "^[0-9]{3}\.0[1-4]$" | grep -v "^${current_version}$" | sort -V | tail -n1)
          
          echo "Previous tag found: $previous_tag"
          
          if [ -z "$previous_tag" ]; then
            echo "No previous tag found - this is initial release"
            echo "changelog=- Initial release" >> $GITHUB_OUTPUT
          else
            echo "Comparing $previous_tag to HEAD"
            # Get all commits between previous release and current HEAD
            if commits=$(git log --oneline "$previous_tag"..HEAD --no-merges --pretty=format:"- %s"); then
              echo "Commits found:"
              echo "$commits"
              if [ -n "$commits" ]; then
                {
                  echo 'changelog<<EOF'
                  echo "$commits"
                  echo EOF
                } >> $GITHUB_OUTPUT
              else
                echo "No commits between $previous_tag and HEAD"
                echo "changelog=- No new commits since $previous_tag" >> $GITHUB_OUTPUT
              fi
            else
              echo "Failed to get commit log"
              echo "changelog=- Unable to generate changelog" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Create release notes
        id: release_notes
        run: |
          version="${{ steps.parse_version.outputs.version }}"
          custom_notes="${{ inputs.release_notes }}"
          changelog="${{ steps.changelog.outputs.changelog }}"
          branch_name="${{ github.ref_name }}"
          
          notes="# Release $version\n\n"
          
          if [ -n "$custom_notes" ]; then
            notes="${notes}## Release Notes\n$custom_notes\n\n"
          fi
          
          notes="${notes}## Changelog\n$changelog\n\n"
          
          notes="${notes}---\n"
          notes="${notes}**Release Information**\n"
          notes="${notes}- Version: $version\n"
          notes="${notes}- Release Branch: $branch_name\n"
          notes="${notes}- Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\n"
          notes="${notes}- Repository: ${{ github.repository }}\n"
          notes="${notes}- Commit: ${GITHUB_SHA:0:7}\n"
          
          {
            echo 'notes<<EOF'
            echo -e "$notes"
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.parse_version.outputs.tag_name }}
          name: Release ${{ steps.parse_version.outputs.version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false

      - name: Output summary
        run: |
          version="${{ steps.parse_version.outputs.version }}"
          release_url="${{ steps.create_release.outputs.html_url }}"
          branch_name="${{ github.ref_name }}"
          
          echo "## Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** $version" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** $branch_name" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** $version" >> $GITHUB_STEP_SUMMARY
          echo "- **Release:** [View Release]($release_url)" >> $GITHUB_STEP_SUMMARY
